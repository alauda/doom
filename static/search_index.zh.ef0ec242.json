[{"id":26,"title":"CodeQualityTaskSummary","content":"#","routePath":"/apis/advanced-apis/codeQualityTaskSummary","lang":"zh","toc":[],"domain":"","frontmatter":{},"version":""},{"id":27,"title":"Event APIs","content":"#","routePath":"/apis/advanced-apis/event/","lang":"zh","toc":[],"domain":"","frontmatter":{"weight":60,"i18n":{"title":{"en":"Event APIs"}}},"version":""},{"id":28,"title":"Search","content":"#","routePath":"/apis/advanced-apis/event/search","lang":"zh","toc":[],"domain":"","frontmatter":{"weight":10,"i18n":{"title":{"en":"Search"}}},"version":""},{"id":29,"title":"高级 API","content":"#","routePath":"/apis/advanced-apis/","lang":"zh","toc":[],"domain":"","frontmatter":{},"version":""},{"id":30,"title":"Aggregation","content":"#","routePath":"/apis/advanced-apis/log/aggregation","lang":"zh","toc":[],"domain":"","frontmatter":{"weight":10,"i18n":{"title":{"en":"Aggregation"}}},"version":""},{"id":31,"title":"Log APIs","content":"#","routePath":"/apis/advanced-apis/log/","lang":"zh","toc":[],"domain":"","frontmatter":{"weight":60,"i18n":{"title":{"en":"Log APIs"}}},"version":""},{"id":32,"title":"Search","content":"#","routePath":"/apis/advanced-apis/log/search","lang":"zh","toc":[],"domain":"","frontmatter":{"weight":10,"i18n":{"title":{"en":"Search"}}},"version":""},{"id":33,"title":"Projects","content":"#","routePath":"/apis/advanced-apis/projects","lang":"zh","toc":[],"domain":"","frontmatter":{},"version":""},{"id":34,"title":"ArtifactCleanupRun","content":"#","routePath":"/apis/crds/ArtifactCleanupRun","lang":"zh","toc":[],"domain":"","frontmatter":{},"version":""},{"id":35,"title":"CRDs","content":"#","routePath":"/apis/crds/","lang":"zh","toc":[],"domain":"","frontmatter":{},"version":""},{"id":36,"title":"APIs","content":"#\n\nThe apis entry is only for demonstration purposes. It is not a real API.","routePath":"/apis/","lang":"zh","toc":[],"domain":"","frontmatter":{"weight":200},"version":""},{"id":37,"title":"CodeQuality","content":"#","routePath":"/apis/references/CodeQuality","lang":"zh","toc":[],"domain":"","frontmatter":{},"version":""},{"id":38,"title":"CodeQualityBranch","content":"#","routePath":"/apis/references/CodeQualityBranch","lang":"zh","toc":[],"domain":"","frontmatter":{},"version":""},{"id":39,"title":"公共引用","content":"#","routePath":"/apis/references/","lang":"zh","toc":[],"domain":"","frontmatter":{},"version":""},{"id":40,"title":"基本介绍","content":"#\n\nDoom 是基于 rspress 开发的、适用于 Alauda 内部使用的文档开发工具，它通过实现丰富的内置插件方便文档用户开箱即用。\n\n\n基础能力#\n\n * 自动生成可配置权重（顺序）的左侧侧边栏\n * 静态文档全文搜索\n * 多语言支持\n\n\n基于 Markdown 及其扩展 MDX#\n\nMDX 是一种功能强大的内容开发方式。你不仅仅可以像往常一样编写 Markdown 文件，而且可以在 Markdown 的内容中使用 React 组件：\n\n\n\n详情可以查看「使用 MDX」 文档。\n\n\n开始尝试#\n\n下面让我们快速开始使用 Doom 吧！","routePath":"/","lang":"zh","toc":[{"text":"基础能力","id":"基础能力","depth":2,"charIndex":72},{"text":"基于 Markdown 及其扩展 MDX","id":"基于-markdown-及其扩展-mdx","depth":2,"charIndex":125},{"text":"开始尝试","id":"开始尝试","depth":2,"charIndex":249}],"domain":"","frontmatter":{},"version":""},{"id":41,"title":"开始","content":"#\n\n\n创建项目#\n\n首先，你可以通过以下命令创建一个新目录：\n\nmkdir my-docs && cd my-docs\n\n\n执行 npm init -y 来初始化一个项目。你可以使用 npm、yarn 或 pnpm 安装 doom:\n\n然后通过如下命令创建文件:\n\n# 创建 docs 目录，默认支持中英文双语\nmkdir docs/en && echo '# Hello World' > docs/en/index.md\nmkdir docs/zh && echo '# 你好世界' > docs/zh/index.md\n\n\n在 package.json 中加上如下的脚本:\n\n{\n  \"scripts\": {\n    \"dev\": \"doom dev\",\n    \"build\": \"doom build\",\n    \"new\": \"doom new\",\n    \"serve\": \"doom serve\",\n    \"translate\": \"doom translate\",\n    \"export\": \"doom export\"\n  }\n}\n\n\n然后初始化一个配置文件 doom.config.yml:\n\ntitle: My Docs\n\n\n同时新建 tsconfig.json，内容如下：\n\n{\n  \"compilerOptions\": {\n    \"jsx\": \"react-jsx\",\n    \"module\": \"NodeNext\",\n    \"moduleResolution\": \"NodeNext\",\n    \"noUnusedLocals\": true,\n    \"noUnusedParameters\": true,\n    \"resolveJsonModule\": true,\n    \"skipLibCheck\": true,\n    \"strict\": true,\n    \"target\": \"ESNext\",\n  },\n  \"mdx\": {\n    \"checkMdx\": true,\n  },\n}\n\n\n最后创建 global.d.ts 文件，内容如下：\n\n/// <reference types=\"@alauda/doom/runtime\" />\n\n\n这样你便可以在 .mdx 文件中类型安全地使用 doom 提供的全局组件了。\n\n\n命令行工具#\n\ndoom -h\n\n# output\nUsage: doom [options] [command]\n\nDoctor Doom making docs.\n\nOptions:\n  -V, --version                   output the version number\n  -c, --config <config>           Specify the path to the config file\n  -v <version>                    Specify the version of the documentation, can also be `unversioned` or `unversioned-x.y`\n  -b, --base <base>               Override the base of the documentation\n  -p, --prefix <prefix>           Specify the prefix of the documentation base\n  -f, --force [boolean]           Force to\n                                  1. fetch latest reference remotes or scaffolding templates, otherwise use local cache\n                                  2. translate ignore hash equality check and original text (default: false)\n  -i, --ignore [boolean]          Ignore internal routes (default: false)\n  -d, --download [boolean]        Display download pdf link on nav bar (default: false)\n  -e, --export [boolean]          Run or build in exporting PDF mode, `apis/**` and `*/apis/**` routes will be ignored automatically (default: false)\n  -I, --include <language...>     Include **only** the specific language(s), `en ru` for example\n  -E, --exclude <language...>     Include all languages except the specific language(s), `ru` for example\n  -o, --out-dir <path>            Override the `outDir` defined in the config file or the default `dist/{base}/{version}`, the resulting path will be `dist/{outDir}/{version}`\n  -r, --redirect <enum>           Whether to redirect to the locale closest to `navigator.language` when the user visits the site, could be `auto`, `never` or `only-default-lang` (default: \"only-default-lang\")\n  -R, --edit-repo [boolean|url]   Whether to enable or override the `editRepoBaseUrl` config feature, `https://github.com/` prefix could be omitted (default: false)\n  -a, --algolia                   Whether to enable Algolia search (default: false)\n  -n, --no-open [boolean]         Do not open the browser after starting the server\n  -h, --help                      display help for command\n\nCommands:\n  dev [options] [root]            Start the development server\n  build [root]                    Build the documentation\n  preview|serve [options] [root]  Preview the built documentation\n  new [template]                  Generate scaffolding from templates\n  translate [options] [root]      Translate the documentation\n  export [options] [root]         Export the documentation as PDF, `apis/**` and `*/apis/**` routes will be ignored automatically\n  lint [root]                     Lint the documentation\n  help [command]                  display help for command\n\n\n更多配置请参考配置\n\n\n启动开发服务#\n\n执行 yarn dev 启动开发服务，浏览器会自动打开文档首页\n\ndoom dev -h\n\n# output\nUsage: doom dev [options] [root]\n\nStart the development server\n\nArguments:\n  root                      Root directory of the documentation\n\nOptions:\n  -H, --host [host]         Dev server host name\n  -P, --port [port]         Dev server port number\n  -l, --lazy [boolean]      Whether to enable `lazyCompilation` which could improve the compilation performance (default: false)\n  -h, --help                display help for command\n\n\n\n生产环境构建#\n\n执行 yarn build 构建生产环境代码，构建完成后会在 dist 目录生成静态文件\n\n\n本地预览#\n\n执行 yarn serve 预览构建后的静态文件，注意如果使用了 -b, -p 参数构建，预览时也需要使用 -b, -p 参数\n\n\n使用脚手架模板#\n\n执行 yarn new 使用脚手架模板生成项目、模块或文档\n\n\n翻译文档#\n\ndoom translate -h\n\n# output\nUsage: doom translate [options] [root]\n\nTranslate the documentation\n\nArguments:\n  root                     Root directory of the documentation\n\nOptions:\n  -s, --source <language>  Document source language, one of en, zh, ru (default: \"en\")\n  -t, --target <language>  Document target language, one of en, zh, ru (default: \"zh\")\n  -g, --glob <path...>     Glob patterns for source dirs/files\n  -C, --copy [boolean]     Wether to copy relative assets to the target directory instead of following links (default: false)\n  -h, --help               display help for command\n\n\n * -g, --glob 参数必填，可以指定需要翻译的文件目录或路径，支持 glob 语法，注意参数值必须带引号否则会被命令行解析造成非预期行为。示例：\n   1. yarn translate -g abc xyz，将把 <root>/<source>/abc, <root>/<source>/xyz\n      目录下的所有文档翻译到 <root>/<target>/abc, <root>/<target>/xyz 目录下\n   2. yarn translate -g '*' 将翻译 <root>/<source> 下的所有文档文件\n * -C, --copy 参数可选，是否在目标文件不存在时复制本地路径的资源文件到目标目录，默认为 false，即改变资源文件的引用路径为引用源路径。示例：\n   * 当启动此参数\n     1. /<source>/abc.jpg 翻译时将复制 <root>/public/<source>/abc.jpg 到\n        <root>/public/<target>/abc.jpg，并修改文档中的引用路径为 /<target>/abc.jpg\n     2. <root>/<source>/abc.mdx 文档中的 ./assets/xyz.jpg 翻译时将复制\n        <root>/<source>/assets/xyz.jpg 到\n        <root>/<target>/assets/xyz.jpg，图片引用路径保持不变\n     3. <root>/<source>/abc.mdx 文档中的 ./assets/<source>/xyz.jpg 翻译时将复制\n        <root>/<source>/assets/<source>/xyz.jpg 到\n        <root>/<target>/assets/<target>/xyz.jpg，并修改文档中的引用路径为\n        ./assets/<target>/xyz.jpg\n   * 当没有启用此参数：\n     1. /<source>/abc.jpg 翻译时如果 <root>/public/<target>/abc.jpg 已存在，将修改文档中的引用路径为\n        /<target>/abc.jpg，否则保持图片引用路径保持不变\n     2. <root>/<source>/abc.mdx 文档中的 ./assets/<source>/xyz.jpg 翻译时，如果\n        <root>/<target>/assets/<target>/xyz.jpg 已存在，将修改文档中的引用路径为\n        ./assets/<target>/xyz.jpg，否则将修改为 ../<source>/assets/<target>/xyz.jpg\n\nWARNING\n\n特殊地，如果使用 -g '*' 进行全量翻译，将会对比 source 和 target 目录文件列表，除 internalRoutes 之外的不匹配的\ntarget 文件将被自动删除\n\nTIP\n\n翻译功能须在本地配置 AZURE_OPENAI_API_KEY 环境变量，请联系各自团队 Leader 获取\n\n文档中可以使用元数据控制翻译行为\n\ni18n:\n  title:\n    en: DevOps Connectors\n  additionalPrompts: '此文中的 Connectors 是专有名词，不要翻译'\n  disableAutoTranslation: false\ntitle: DevOps 连接器\n\n\n更多配置请参考翻译配置\n\n\n导出 PDF#\n\nWARNING\n\n请在执行导出操作前先执行 yarn build 构建操作\n\ndoom export -h\n\n# output\nUsage: doom export [options] [root]\n\nExport the documentation as PDF, `apis/**` and `*/apis/**` routes will be ignored automatically\n\nArguments:\n  root               Root directory of the documentation\n\nOptions:\n  -H, --host [host]  Serve host name\n  -P, --port [port]  Serve port number (default: \"4173\")\n  -h, --help         display help for command\n\n\n执行 yarn export 导出文档为 PDF 文件，注意如果使用了 -b, -p 参数构建，导出时也需要使用 -b, -p 参数\n\n导出功能依赖 playwright，流水线请使用 build-harbor.alauda.cn/frontend/playwright-runner:doom\n作为依赖安装和文档构建的基础镜像， 本地可以设置如下环境变量加速下载：\n\nPLAYWRIGHT_DOWNLOAD_HOST=\"https://cdn.npmmirror.com/binaries/playwright\"\n\n\n\n文档检查#\n\ndoom lint -h\n\n# output\nUsage: doom lint [options] [root]\n\nLint the documentation\n\nArguments:\n  root        Root directory of the documentation\n\nOptions:\n  -h, --help  display help for command\n\n\n更多配置请参考文档检查配置","routePath":"/start","lang":"zh","toc":[{"text":"创建项目","id":"create","depth":2,"charIndex":3},{"text":"命令行工具","id":"cli","depth":2,"charIndex":988},{"text":"启动开发服务","id":"dev","depth":3,"charIndex":3642},{"text":"生产环境构建","id":"build","depth":3,"charIndex":4140},{"text":"本地预览","id":"serve","depth":3,"charIndex":4196},{"text":"使用脚手架模板","id":"new","depth":3,"charIndex":4269},{"text":"翻译文档","id":"translate","depth":3,"charIndex":4311},{"text":"导出 PDF","id":"export","depth":3,"charIndex":6472},{"text":"文档检查","id":"lint","depth":3,"charIndex":7160}],"domain":"","frontmatter":{},"version":""},{"id":42,"title":"API 文档","content":"#\n\n根据实际业务，我们一般会将 API 分为高级 API 和 CRD (Custom Resource Definition) 两种，因此在目录结构上一般分为：\n\n├── apis\n│   ├── advanced-apis # 高级 API\n│   ├── crds # CRDs\n│   └── references # 公共引用\n\n\n\n高级 API#\n\n# CodeQualityTaskSummary\n\n\n\n\n参考 CodeQualityTaskSummary。\n\n\nprops#\n\n * path: OpenAPI schema paths 下的路径\n * pathPrefix: 可以用于覆盖全局配置中的 api.pathPrefix\n * openapiPath: 参考指定 openapi 路径\n\n\nCRD#\n\n# ArtifactCleanupRun\n\n\n\n\n参考 ArtifactCleanupRun。\n\n\nprops#\n\n * name: CRD metadata.name\n * crdPath: 类似指定 openapi 路径，用于指定特定的 CRD 文件\n\n\n公共引用#\n\n# CodeQuality\n\n\n\n\n参考 CodeQuality。\n\n\nprops#\n\n * schema: OpenAPI schema definitions(v2) or component/schemas(v3) 下的名称\n * openapiPath: 参考指定 openapi 路径\n\n\n指定 openapi 路径#\n\n对于 OpenAPIPath 和 OpenAPIRef 组件，默认会在所有 openapi 定义文件中查找至匹配，如果需要指定特定的 openapi\n文件，可以使用 openapiPath 属性指定：\n\n<OpenAPIPath\n  path=\"/plugins/v1alpha1/template/codeQuality/task/{task-id}/summary\"\n  openapiPath=\"shared/openapis/katanomi.json\"\n/>\n","routePath":"/usage/api","lang":"zh","toc":[{"text":"高级 API","id":"高级-api","depth":2,"charIndex":171},{"text":"`props`","id":"props","depth":3,"charIndex":-1},{"text":"CRD","id":"crd","depth":2,"charIndex":358},{"text":"`props`","id":"props-1","depth":3,"charIndex":-1},{"text":"公共引用","id":"公共引用","depth":2,"charIndex":494},{"text":"`props`","id":"props-2","depth":3,"charIndex":-1},{"text":"指定 openapi 路径","id":"指定-openapi-路径","depth":2,"charIndex":651}],"domain":"","frontmatter":{"weight":5},"version":""},{"id":43,"title":"配置","content":"---\ndescription: 配置 `doom` 文档工具\nweight: 1\n---\n\n# 配置 {#configuration}\n\n## 配置文件 {#config-file}\n\n大部分情况下，我们只需要使用静态 `yaml` 配置文件即可，支持 `doom.config.yaml` 或 `doom.config.yml`，对于复杂场景，比如需要动态配置或自定义 `rspress` 插件时，可以使用 `js/ts` 配置文件，支持 `.js/.ts/.mjs/.mts/.cjs/.cts` 多种文件格式。\n\n对于 `js/ts` 配置文件，我们需要导出配置，可以配合 `@alauda/doom/config` 中导出的 `defineConfig` 函数实现类型辅助：\n\n```ts\nimport { defineConfig } from '@alauda/doom/config'\n\nexport default defineConfig({})\n```\n\n## 基础配置 {#basic}\n\n- `lang`：默认文档语言，为方便大部分项目使用，我们默认支持中英文文档，默认语言为 `en`，如果当前文档项目不需要多语言支持，可以将此项配置为 `null` 或 `undefined`\n- `title`：文档标题，会显示在浏览器标签页上\n- `logo`：文档左上角 logo，支持图片链接、文件路径，绝对路径代表 `public` 目录下的文件，相对路径代表相对于当前工具目录的文件，默认使用 `doom` 包内置的 alauda logo\n- `logoText`：文档标题，会显示在左上角的 logo 处\n- `icon`：文档 favicon，默认同 `logo`\n- `base`：文档基础路径，用于部署到非根路径，如 `product-docs`，默认为 `/`\n- `outDir`：构建产物目录，默认为 `dist/{base}/{version}`，如果指定此项，则变更为 `dist/{outDir}/{version}`，其中 `version` 可选，参考[多版本构建](./deploy#多版本构建)\n\n## API 文档配置 {#api}\n\n```yaml\napi:\n  # CRD 定义文件路径，相对于 doom.config.* 所在目录，支持 glob 匹配，json/yaml 文件\n  crds:\n    - docs/shared/crds/*.yaml\n  # OpenAPI 定义文件路径，相对于 doom.config.* 所在目录，支持 glob 匹配，json/yaml 文件\n  openapis:\n    - docs/shared/openapis/*.json\n  # 渲染 openapi 相关的资源定义时，默认会在页面内联，如果需要将相关联的资源定义单独提取到文件中，可以配置以下选项\n  # 参考 https://doom.alauda.cn/apis/references/CodeQuality.html#v1alpha1.CodeQualitySpec\n  references:\n    v1alpha1.CodeQualityBranch: /apis/references/CodeQualityBranch#v1alpha1.CodeQualityBranch\n  # 可选，API 文档路径前缀，如果当前业务使用 gateway 等代理服务，可以配置此项\n  pathPrefix: /apis\n```\n\n文档编写参考 [API 文档](./api)\n\n## 权限说明文档配置 {#permission}\n\n```yaml\n# 以下资源文件路径，相对于 doom.config.* 所在目录，支持 glob 匹配，json/yaml 文件\npermission:\n  functionresources:\n    # `kubectl get functionresources`\n    - docs/shared/functionresources/*.yaml\n  roletemplates:\n    # `kubectl get roletemplates -l auth.cpaas.io/roletemplate.official=true`\n    - docs/shared/roletemplates/*.yaml\n```\n\n文档编写参考[权限说明文档](./permission)\n\n## 引用文档配置 {#reference}\n\n```yaml\nreference:\n  - repo: alauda-public/product-doc-guide # 可选，引用文档仓库地址，如果不填写，则默认使用当前文档仓库地址\n    branch: # [string] 可选，引用文档仓库分支\n    publicBase: # [string] 可选，使用远程仓库时使用绝对路径 /images/xx.png 对应的静态资源所在目录，默认为 docs/public\n    sources:\n      - name: anchor # 引用文档名称，用于在文档中引用，全局唯一\n        path: docs/index.mdx#介绍 # 引用文档路径，支持锚点定位，远程仓库相对于仓库根目录，本地相对于 doom.config.* 所在目录\n        ignoreHeading: # [boolean] 可选，是否忽略标题，如果为 true，则不会在引用文档中显示锚点的标题\n        processors: # 可选，引用文档内容处理器\n          - type: ejsTemplate\n            data: # ejs 模板参数，使用 `<%= data.xx %>` 访问\n        frontmatterMode: merge # 可选，引用文档处理 frontmatter 模式，默认为 ignore，可选值为 ignore/merge/replace/remove\n```\n\n### `frontmatterMode`\n\n- `ignore`：忽略引用文档的 frontmatter，保留使用当前文档的 frontmatter\n- `merge`：合并引用文档的 frontmatter，如果有相同的 key，引用文档的值会覆盖当前文档的值\n- `replace`：使用引用文档的 frontmatter 替换当前文档的 frontmatter\n- `remove`：移除当前文档的 frontmatter\n\n文档编写参考[引用文档](./reference#reference)\n\n## 发行说明配置 {#release-notes}\n\n```yaml\nreleaseNotes:\n  queryTemplates:\n    fixed: # 可包含 ejs 模板的 jql 语句\n    unfixed:\n```\n\n```md title=\"release-notes.md\"\n<!-- release-notes-for-bugs?template=fixed&project=DevOps -->\n```\n\n```mdx title=\"release-notes.mdx\"\n{/* release-notes-for-bugs?template=fixed&project=DevOps */}\n```\n\n以上述 `template=fixed&project=DevOps` 为例，`fixed` 为 `queryTemplates` 中定义的模板名称，剩余的 `query` 参数 `project=DevOps` 将作为 [`ejs`](https://github.com/mde/ejs) 模板参数传递给 `fixed` 模板处理后作为 jira [`jql`](https://www.atlassian.com/zh/software/jira/guides/jql/overview#what-is-jql) 发起 `https://jira.alauda.cn/rest/api/2/search?jql=<jql>` 请求，此 API 要求鉴权，须提供 `JIRA_USERNAME` 和 `JIRA_PASSWORD` 环境变量才能预览生效\n\n## 左导航配置 {#sidebar}\n\n```yaml\nsidebar:\n  collapsed: false # 可选，是否默认折叠左导航，默认折叠，文档内容不多时可以考虑设置为 false\n```\n\n## 内部文档路由配置 {#internal-routes}\n\n```yaml\ninternalRoutes: # 可选，支持 glob 匹配，相对于 docs 目录，在 cli 启用 `-i, --ignore` 选项时匹配到的路由/文件会被忽略\n  - '*/internal/**'\n```\n\n## 仅包含文档路由配置 {#only-include-routes}\n\n```yaml\nonlyIncludeRoutes: # 可选，支持 glob 匹配，相对于 docs 目录，在 cli 启用 `-i, --ignore` 选项时只有此配置下的路由/文件会被启用，可同时配合 `internalRoutes` 进一步排除其中的部分路由\n  - '*/internal/**'\ninternalRoutes:\n  - '*/internal/overview.mdx'\n```\n\n## 语言高亮插件配置 {#highlight}\n\n```yaml\nshiki:\n  theme: # optional, https://shiki.style/themes\n  langs: # optional, https://shiki.style/languages\n  transformers: # optional, only available in js/ts config, https://shiki.style/guide/transformers\n```\n\n:::warning\n未配置的语言将在命令行提示告警，并回退到 `plaintext` 渲染\n:::\n\n## `sites.yaml` 配置 {#sites}\n\n`sites.yaml` 配置文件用于配置当前文档站点关联的子站点信息，[引用外部站点组件](./mdx#externalsite)和构建单版本文档时会用到此处定义的信息。\n\n```yaml\n- name: connectors # 全站唯一名称\n  base: /devops-connectors # 站点访问基础路径\n  version: v1.1 # 构建多版本站点时 ExternalSite/ExternalSiteLink 跳转的版本\n\n  displayName: # 站点显示名称，如果不填写或未匹配到语言，则默认使用 name\n    en: DevOps Connectors\n    zh: DevOps 连接器\n\n  # 以下属性用于构建全站点时拉取镜像，如果不填写则在最终打包完整网站时将忽略此项\n  # 一般对子站点引用需要配置相关信息，对父站点引用不需要配置\n  repo: https://github.com/AlaudaDevops/connectors-operator # 站点仓库地址，如果是内部 gitlab 仓库，可以直接使用相关 slug，如 `alauda/product-docs`\n  image: devops/connectors-docs # 站点构建镜像，用于构建全站点时拉取镜像\n```\n\n## 翻译配置 {#translate}\n\n```yaml\ntranslate:\n  # 系统提示语，ejs 模板，传入的参数有 `sourceLang`, `targetLang`, `userPrompt` 和 `additionalPrompts`\n  # 其中 `sourceLang` 和 `targetLang` 是 `中文` 和 `英文` 两个字符串，\n  #     `userPrompt` 为下述用户全局配置，可能为空\n  #     `additionalPrompts` 为文档 `frontmatter.i18n` 中的 `additionalPrompts` 配置，可能为空\n  # 默认的系统提示语如下，可以根据实际情况进行修改\n  systemPrompt: |\n## 角色\n你是一位专业的技术文档工程师，擅长写作高质量的<%= targetLang %>技术分档。请你帮我准确地将以下<%= sourceLang %>翻译成<%= targetLang %>，风格与<%= targetLang %>技术文档保持一致。\n\n## 规则\n- 第一条消息为需要翻译的最新<%= sourceLang %>文档，第二条消息为之前翻译过的但内容可能过期的<%= targetLang %>文档，如果没有翻译过则为空\n- 输入格式为 MDX 格式，输出格式也必须保留原始 MDX 格式，不要翻译其中的 jsx 组件名称，如 <Overview />，且不要额外包装在不必要的代码块中\n- 文档中的资源链接不要翻译和替换\n- MDX 组件中包含的内容需要翻译，MDX 组件名和参数值不需要翻译，但特殊的 MDX 组件参数值需要翻译，示例：\n  - <Overview /> 中的 Overview 是组件名，不用翻译\n  - <Tab label=\"value\">组件包含的内容</Tab>，label 是 key 不用翻译，\"value\" 是参数值需要翻译\n<%= terms %>\n- 如果存在下列注释，请保留不用翻译，更不要修改注释内容\n  - {/* release-notes-for-bugs */}\n  - <!-- release-notes-for-bugs -->\n- 如果存在下列注释，请整体移除不要保留\n  - {/* reference-start */}\n  - {/* reference-end */}\n  - <!-- reference-start -->\n  - <!-- reference-end -->\n- 翻译过程中务必保留原文中的 \\\\< 和 \\\\{ 转义字符不要做任何转义变更\n- 翻译过程中不要破坏原有的 Markdown 格式，如 frontmatter, 代码块、列表、表格等，其中 frontmatter.ii8n 的内容不用做任何翻译，只需要原样返回即可\n\n## 策略\n分四步进行翻译工作：\n1. 根据<%= sourceLang %>文档直译成<%= targetLang %>，保持原有格式，不要遗漏任何信息\n2. 根据第一步直译的结果，指出其中存在的具体问题，要准确描述，不宜笼统的表示，也不要增加原文不存在的内容或格式，包括不仅限于\n - 不符合<%= targetLang %>表达习惯，明确指出不符合的地方\n - 语句不通顺，指出位置，不需要给出修改意见，意译时修复\n - 晦涩难懂，模棱两可，不易理解，可以尝试给出解释\n3. 根据第一步直译的结果和第二步指出的问题，重新进行意译，保证内容的原意的基础上，使其更易于理解，更符合<%= targetLang %>技术文档的表达习惯，同时保持原有的格式不变\n4. 当存在之前翻译过的<%= targetLang %>文档时，将第三步的结果分段与之前的<%= targetLang %>文档细致地比较，不要遗漏任何新的分段（包括文本、资源链接等），如果分段内翻译结果意思相近，仅仅表达方式不同的，且没有新增任何内容时，则该分段只需要保持之前翻译过的内容即可，不需要重复翻译\n\n最终只需要输出最后一步的结果，不需要输出之前步骤的结果。\n\n<%= userPrompt %>\n\n<%= additionalPrompts %>\n  userPrompt: # 可选，用于填充到 `systemPrompt` 中的 `ejs` 模板全局参数\n```\n\n## 在代码仓库编辑文档 {#edit-repo}\n\n```yaml\neditRepoBaseUrl: alauda/doom/tree/main/docs # https://github.com/ 前缀可以省略，仅当启用 `-R, --edit-repo` 命令行标志符时生效\n```\n\n## 文档检查配置 {#lint}\n\n```yaml\nlint:\n  cspellOptions: # 可选，cspell 配置项，参考 https://github.com/streetsidesoftware/cspell/tree/main/packages/cspell-eslint-plugin#options\n```\n\n## Algolia 搜索配置 {#algolia}\n\n```yaml\nalgolia:\n  appId: # Algolia 应用 ID\n  apiKey: # Algolia API Key\n  indexName: # Algolia 索引名称\n```\n","routePath":"/usage/configuration","lang":"zh","toc":[{"text":"配置文件","id":"config-file","depth":2,"charIndex":3},{"text":"基础配置","id":"basic","depth":2,"charIndex":279},{"text":"API 文档配置","id":"api","depth":2,"charIndex":719},{"text":"权限说明文档配置","id":"permission","depth":2,"charIndex":1293},{"text":"引用文档配置","id":"reference","depth":2,"charIndex":1627},{"text":"`frontmatterMode`","id":"frontmattermode","depth":3,"charIndex":-1},{"text":"发行说明配置","id":"release-notes","depth":2,"charIndex":2502},{"text":"左导航配置","id":"sidebar","depth":2,"charIndex":2907},{"text":"内部文档路由配置","id":"internal-routes","depth":2,"charIndex":2987},{"text":"仅包含文档路由配置","id":"only-include-routes","depth":2,"charIndex":3106},{"text":"语言高亮插件配置","id":"highlight","depth":2,"charIndex":3314},{"text":"`sites.yaml` 配置","id":"sites","depth":2,"charIndex":-1},{"text":"翻译配置","id":"translate","depth":2,"charIndex":4137},{"text":"在代码仓库编辑文档","id":"edit-repo","depth":2,"charIndex":5954},{"text":"文档检查配置","id":"lint","depth":2,"charIndex":6075},{"text":"Algolia 搜索配置","id":"algolia","depth":2,"charIndex":6222}],"domain":"","frontmatter":{"description":"配置 `doom` 文档工具","weight":1},"version":""},{"id":44,"title":"约定","content":"#\n\n\n目录结构#\n\n左侧边栏默认基于文件目录结构自动生成，一级目录中 index 文件即文档首页，将展示为左导航首项，子文件夹中可以使用 index.md 或 index.mdx\n并定义文档一级标题来设置左侧边栏分组标题，其他子文档将自动归并到当前分组下，嵌套子文件夹也遵循相同规则。\n\n├── index.md\n├── start.mdx\n└── usage\n    ├── index.mdx\n    └── convention.md\n\n\n同时我们约定\n\n 1. public 目录用于存放静态资源，如图片、视频等\n 2. public/_remotes 用于存放远程引用文档关联的静态资源，请勿直接依赖该目录的资源，可以将 */public/_remotes 加入\n    .gitignore 避免提交到代码仓库\n 3. shared 目录用于存放公共组件、可复用的文档等，不会自动生成文档数据。\n\n\n元数据#\n\n在文档的开头，可以通过 frontmatter 来定义文档的元数据，如标题、描述、作者、分类等。\n\n---\ntitle: 标题\ndescription: 描述\nauthor: 作者\ncategory: 分类\n---\n\n\n在文档正文中，参考 MDX 使用 .mdx 文件时可以使用 frontmatter 来访问这些元数据。\n\n\n排序#\n\n除 index.md 或 index.mdx 外，其他文档将默认按照文件名排序，可以通过自定义 frontmatter 中的 weight\n值来调整文档在左侧边栏中的排序（weight 值越小排序越靠前）。\n\n---\nweight: 1\n---\n\n\nWARNING\n\n注意：目前左导航配置的变更需要重启服务才能生效，一般开发时不用过多关注。\n\n\n预览#\n\n有时在分组首页中我们不需要显示特别的内容，这时可以使用 index.mdx 文件并使用 Overview\n组件来展示当前分组的文档列表，将展示分组列表文件的标题、描述和二级标题信息。\n\n# 使用\n\n<Overview />\n\n\n效果可以参考使用。","routePath":"/usage/convention","lang":"zh","toc":[{"text":"目录结构","id":"目录结构","depth":2,"charIndex":3},{"text":"元数据","id":"元数据","depth":2,"charIndex":406},{"text":"排序","id":"排序","depth":2,"charIndex":576},{"text":"预览","id":"预览","depth":2,"charIndex":754}],"domain":"","frontmatter":{"description":"基于“约定大于配置”的理念，我们约定文档的组织方式以自动生成左侧边栏等相关内容","weight":2},"version":""},{"id":45,"title":"部署","content":"Redirecting to /console-docs/4.1","routePath":"/usage/deploy","lang":"zh","toc":[{"text":"构建与预览","id":"构建与预览","depth":2,"charIndex":-1},{"text":"多版本构建","id":"多版本构建","depth":2,"charIndex":-1},{"text":"合并目录结构","id":"合并目录结构","depth":2,"charIndex":-1},{"text":"动态挂载配置文件","id":"overrides","depth":2,"charIndex":-1}],"domain":"","frontmatter":{"description":"文档项目开发完成后我们可以将项目部署到 ACP 平台","weight":8},"version":""},{"id":46,"title":"国际化","content":"#\n\nalauda 内部大部分文档都是中英文双语，因此我们默认支持使用 en/zh 两个子文件夹来存放不同语言的文档，推荐在 public 目录下也按 en/zh\n子文件夹存放静态资源，这样可以方便文档内容和静态资源的管理。\n\n\ni18n.json#\n\n对于可复用组件，如果需要在同一个组件中同时支持中英文，那么就需要先在 docs 目录下创建 i18n.json 文件，然后在组件中通过 useI18n\n来获取当前语言的文本，比如：\n\n{\n  \"title\": {\n    \"zh\": \"标题\",\n    \"en\": \"Title\"\n  },\n  \"description\": {\n    \"zh\": \"描述\",\n    \"en\": \"description\"\n  }\n}\n\n\n\n.ts/.tsx#\n\n\n\nexport const CommonContent = () => {\n  const t = useI18n()\n  return <h1>{t('title')}</h1>\n}\n\n\n\n.mdx#\n\n\n\n# {useI18n()('title')}\n\n{useI18n()('description')}\n","routePath":"/usage/i18n","lang":"zh","toc":[{"text":"`i18n.json`","id":"i18njson","depth":2,"charIndex":-1},{"text":"`.ts/.tsx`","id":"tstsx","depth":2,"charIndex":-1},{"text":"`.mdx`","id":"mdx","depth":2,"charIndex":-1}],"domain":"","frontmatter":{"description":"在可复用组件中使用国际化文本","weight":4},"version":""},{"id":47,"title":"使用","content":"#","routePath":"/usage/","lang":"zh","toc":[],"domain":"","frontmatter":{},"version":""},{"id":48,"title":"Markdown","content":"#\n\n除了标准的 gfm 语法外，Doom 内置了一些额外的 Markdown 扩展功能。\n\n\nCallouts#\n\n源码标注组件\n\nNOTE\n 1. 请根据实际语言使用行内代码注释，如 ;, %, #, //, /** */, -- 和 <!-- --> 等\n 2. 如果需要将其视为代码注释，请使用 [\\!code callout] 进行转义\n 3. 有时，:::callouts 由于嵌套缩进导致解析显示异常，可以使用 <div class=\"doom-callouts\"> 或 <Callouts>\n    组件代替\n\n```sh\nMemory overhead per virtual machine ≈ (1.002 × requested memory) \\\n              + 218 MiB \\  # [!code callout]\n              + 8 MiB × (number of vCPUs) \\  # [!code callout]\n              + 16 MiB × (number of graphics devices) \\  # [!code callout]\n              + (additional memory overhead) # [!code callout]\n```\n\n:::callouts\n\n1. Required for the processes that run in the `virt-launcher` pod.\n2. Number of virtual CPUs requested by the virtual machine.\n3. Number of virtual graphics cards requested by the virtual machine.\n4. Additional memory overhead:\n   - If your environment includes a Single Root I/O Virtualization (SR-IOV) network device or a Graphics Processing Unit (GPU), allocate 1 GiB additional memory overhead for each device.\n   - If Secure Encrypted Virtualization (SEV) is enabled, add 256 MiB.\n   - If Trusted Platform Module (TPM) is enabled, add 53 MiB.\n\n:::\n\n\nMemory overhead per virtual machine ≈ (1.002 × requested memory) \\\n              + 218 MiB \\  # [!code callout]\n              + 8 MiB × (number of vCPUs) \\  # [!code callout]\n              + 16 MiB × (number of graphics devices) \\  # [!code callout]\n              + (additional memory overhead) # [!code callout]\n\n\n:::callouts\n\n 1. Required for the processes that run in the virt-launcher pod.\n 2. Number of virtual CPUs requested by the virtual machine.\n 3. Number of virtual graphics cards requested by the virtual machine.\n 4. Additional memory overhead:\n    * If your environment includes a Single Root I/O Virtualization (SR-IOV)\n      network device or a Graphics Processing Unit (GPU), allocate 1 GiB\n      additional memory overhead for each device.\n    * If Secure Encrypted Virtualization (SEV) is enabled, add 256 MiB.\n    * If Trusted Platform Module (TPM) is enabled, add 53 MiB.\n\n:::\n\n更多源码转换功能请参考 Shiki Transformers。\n\n\nMermaid#\n\n图表绘制工具\n\n```mermaid\ngraph TD;\n    A-->B;\n    A-->C;\n    B-->D;\n    C-->D;\n```\n\n\ngraph TD;\n    A-->B;\n    A-->C;\n    B-->D;\n    C-->D;\n\n\n配合 Markdown Preview Mermaid 可以在 VSCode 中实时预览。","routePath":"/usage/markdown","lang":"zh","toc":[{"text":"Callouts","id":"callouts","depth":2,"charIndex":47},{"text":"Mermaid","id":"mermaid","depth":2,"charIndex":2088}],"domain":"","frontmatter":{"weight":3},"version":""},{"id":49,"title":"MDX","content":"#\n\nMDX 是一种 Markdown 的扩展语法，允许在 Markdown 中使用 JSX 语法，使用方式可以参考 rspress MDX。\n\n\nrspress 组件#\n\nrspress 主题提供的内置组件大部分已调整为全局组件，可以在 .mdx 文件中无需导入直接使用，包括：\n\n * Badge\n * Card\n * LinkCard\n * PackageManagerTabs\n * Steps\n * Tab/Tabs\n * Toc\n\n其他不常用的组件可以通过 @rspress/core/theme 导入使用，例如：\n\n\n\n\n\n\n\ndoom 组件#\n\ndoom 提供了一些全局组件来辅助文档编写，不需要导入即可直接使用，目前包括：\n\n\nOverview#\n\n文档概览组件，用于展示文档目录\n\n\nDirective#\n\n有时，由于嵌套缩进，自定义容器语法可能失效，可以使用 Directive 组件代替\n\n- 多语言文档(`doc/en`)的目录结构需要与 `doc/zh` 目录下的文档完全一致，保证多语言文档的链接除了语言标识外完全相同。\n\n  <Directive type=\"danger\" title=\"注意\">\n    如果是使用自动化翻译工具进行翻译，则无需关心该问题，自动化翻译工具会自动根据\n    `doc/zh` 生成目标语言文档的目录结构。\n  </Directive>\n\n\n * 多语言文档(doc/en)的目录结构需要与 doc/zh 目录下的文档完全一致，保证多语言文档的链接除了语言标识外完全相同。\n\n\nExternalSite#\n\n引用外部站点组件\n\n<ExternalSite name=\"connectors\" />\n\n\n\nExternalSiteLink#\n\n引用外部站点链接组件\n\n<ExternalSiteLink name=\"connectors\" href=\"link.mdx#hash\" children=\"Content\" />\n\n\nTIP\n\n在 mdx 中 <ExternalSiteLink name=\"connectors\" href=\"link\" children=\"Content\" />\n与下面的内容含义不同\n\n<ExternalSiteLink name=\"connectors\" href=\"link\">\n  Content {/* 将渲染在 `p` 元素内 */}\n</ExternalSiteLink>\n\n\n如果不希望文本渲染在 p 元素内，可以像上面的示例一样使用 children 属性传递\n\n\nAcpApisOverview 与 ExternalApisOverview#\n\n引用外部站点 API 概览组件\n\n<AcpApisOverview />\n{/* same as following */}\n<ExternalApisOverview name=\"acp\" />\n\n<ExternalApisOverview name=\"connectors\" />\n\n\n\nTerm#\n\n术语组件，纯文本，动态挂载注入\n\n<Term name=\"company\" textCase=\"capitalize\" />\n<Term name=\"product\" textCase=\"lower\" />\n<Term name=\"productShort\" textCase=\"upper\" />\n\n\nprops#\n\n * name: 内置术语名称，参考动态挂载配置文件\n * textCase: 文本大小写转换，可选值为lower, upper, capitalize\n\n\nTermsTable#\n\n内置术语列表展示组件\n\n<TermsTable />\n\n\nprops#\n\n * terms: NormalizedTermItem[]，可选，自定义术语列表，方便内部文档渲染自定义术语时复用\n\n\nJsonViewer#\n\n<JsonViewer value={{ key: 'value' }} />\n\n\n\n自定义组件复用#\n\n根据约定，我们可以将需要复用的内容抽取到 shared 目录中，然后在需要的地方引入即可，比如：\n\n\n\n<CommonContent />\n\n\n如果需要使用更多 runtime 相关的 API，可以使用 .jsx/.tsx 实现组件，然后在 .mdx 文件中引入使用。\n\n// shared/CommonContent.tsx\nexport const CommonContent = () => {\n  const { page } = usePageData()\n  return <div>{page.title}</div>\n}\n\n// showcase/content.mdx\n\n;<CommonContent />\n\n\nWARNING\n\n注意：目前 .mdx 导出的组件不支持 props 传参，参考此 issue，因此需要传递 props 的场景请使用 .jsx/.tsx 组件进行开发","routePath":"/usage/mdx","lang":"zh","toc":[{"text":"rspress 组件","id":"rspress-组件","depth":2,"charIndex":73},{"text":"doom 组件","id":"doom-组件","depth":2,"charIndex":270},{"text":"`Overview`","id":"overview","depth":3,"charIndex":-1},{"text":"`Directive`","id":"directive","depth":3,"charIndex":-1},{"text":"`ExternalSite`","id":"externalsite","depth":3,"charIndex":-1},{"text":"`ExternalSiteLink`","id":"externalsitelink","depth":3,"charIndex":-1},{"text":"`AcpApisOverview` 与 `ExternalApisOverview`","id":"acpapisoverview-与-externalapisoverview","depth":3,"charIndex":-1},{"text":"Term","id":"term","depth":3,"charIndex":1276},{"text":"`props`","id":"props","depth":4,"charIndex":-1},{"text":"`TermsTable`","id":"termstable","depth":3,"charIndex":-1},{"text":"`props`","id":"props-1","depth":4,"charIndex":-1},{"text":"`JsonViewer`","id":"jsonviewer","depth":3,"charIndex":-1},{"text":"自定义组件复用","id":"自定义组件复用","depth":2,"charIndex":1689}],"domain":"","frontmatter":{"description":"使用 MDX 可以实现动态内容的展示和内容复用","weight":3},"version":""},{"id":50,"title":"权限说明文档","content":"#\n\n<K8sPermissionTable functions={['devops-testplans', 'devops-testmodules']} />\n\n\n\nprops#\n\n * functions: string[] - 必填，需要展示的 FunctionResource 资源名称数组\n\n\n示例#","routePath":"/usage/permission","lang":"zh","toc":[{"text":"`props`","id":"props","depth":2,"charIndex":-1},{"text":"示例","id":"示例","depth":2,"charIndex":-1}],"domain":"","frontmatter":{"weight":6},"version":""},{"id":51,"title":"引用文档","content":"#\n\n在 Markdown 文件中：\n\n<!-- reference-start#name -->\n\n<!-- reference-end -->\n\n\n在 MDX 文件中：\n\n{/* reference-start#name */}\n\n{/* reference-end */}\n\n\n上述 name 为引用文档的名称，参考引用文档配置，如果引用的文档内容使用了远程仓库图片静态资源，相关静态资源将自动存储在本地\n<root>/public/_remotes/<name> 目录下。\n\n以下为使用 <!-- reference-start#ref --> 的实例：\n\n\n引用文档配置#\n\nreference:\n  - repo: alauda-public/product-doc-guide # 可选，引用文档仓库地址，如果不填写，则默认使用当前文档仓库地址\n    branch: # [string] 可选，引用文档仓库分支\n    publicBase: # [string] 可选，使用远程仓库时使用绝对路径 /images/xx.png 对应的静态资源所在目录，默认为 docs/public\n    sources:\n      - name: anchor # 引用文档名称，用于在文档中引用，全局唯一\n        path: docs/index.mdx#介绍 # 引用文档路径，支持锚点定位，远程仓库相对于仓库根目录，本地相对于 doom.config.* 所在目录\n        ignoreHeading: # [boolean] 可选，是否忽略标题，如果为 true，则不会在引用文档中显示锚点的标题\n        processors: # 可选，引用文档内容处理器\n          - type: ejsTemplate\n            data: # ejs 模板参数，使用 `<%= data.xx %>` 访问\n        frontmatterMode: merge # 可选，引用文档处理 frontmatter 模式，默认为 ignore，可选值为 ignore/merge/replace/remove\n\n\n\nfrontmatterMode#\n\n * ignore：忽略引用文档的 frontmatter，保留使用当前文档的 frontmatter\n * merge：合并引用文档的 frontmatter，如果有相同的 key，引用文档的值会覆盖当前文档的值\n * replace：使用引用文档的 frontmatter 替换当前文档的 frontmatter\n * remove：移除当前文档的 frontmatter\n\n文档编写参考引用文档","routePath":"/usage/reference","lang":"zh","toc":[{"text":"引用文档配置","id":"reference","depth":2,"charIndex":283},{"text":"`frontmatterMode`","id":"frontmattermode","depth":3,"charIndex":-1}],"domain":"","frontmatter":{"weight":7},"version":""}]